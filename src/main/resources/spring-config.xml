<?xml version="1.0" encoding="UTF-8"?>
<!-- ClubTriatlon: a web app to management of administrative work of a triathlon club
     Copyright (C) 2015 Alejandro Mikitinskis

     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 3 of the License, or
     (at your option) any later version.

     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software Foundation,
     Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

     Contact here: alejandro.mikitinskis@udc.es -->

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- Enable usage of @Autowired -->
	<context:annotation-config/>

	<!-- Data source -->
<!--	<bean id="dataSource"
		class="org.springframework.jndi.JndiObjectFactoryBean"
		p:jndiName="${dataSource.jndiName}"
		p:resourceRef="true" /> -->
 	<bean class="java.net.URI" id="dbUrl"> 
 		<constructor-arg value="#{systemEnvironment['CLUBTRIATLON_DATABASE_URL']}"/>
 	</bean>
 	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbcDriver.className}"/>
 		<property name="url"      value="#{ 'jdbc:mysql://' + @dbUrl.getHost() + ':' +
                                                @dbUrl.getPort() + @dbUrl.getPath() }"/>
 		<property name="username" value="#{ @dbUrl.getUserInfo().split(':')[0] }"/>
 		<property name="password" value="#{ @dbUrl.getUserInfo().split(':')[1] }"/>
 	</bean>

	<!--<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.LazyConnectionDataSourceProxy"
		p:targetDataSource-ref="dataSource"/> -->

	<!-- Hibernate Session Factory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:/hibernate.cfg.xml"/>

	<!-- Transaction manager for a single Hibernate SessionFactory  -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager"
		p:sessionFactory-ref="sessionFactory" />

	<!--  For translating native persistence exceptions to Spring's DataAccessException hierarchy -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

	<!-- Enable the configuration of transactional behavior based on annotations. -->
	<!--<tx:annotation-driven transaction-manager="transactionManager" /> -->
	<task:annotation-driven scheduler="scheduler-pool"/>
	<task:scheduler id="scheduler-pool" pool-size="1"/>

    <!-- Enable component scanning for defining beans with annotations. -->
    <context:component-scan base-package="es.udc.tfg_es.clubtriatlon.model, 
                                          es.udc.tfg_es.clubtriatlon.service" />

    <!-- Apache Shiro (http://shiro.apache.org/spring.html) -->
	<bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
		<property name="name" value="jdbcRealm" />
		<property name="dataSource" ref="dataSource" />
		<property name="authenticationQuery" value="SELECT enPassword as password
		                                            FROM UserProfile
		                                            WHERE email = ?" />
		<!-- ¿Es mejor JOIN o subconsulta?-->
		<property name="userRolesQuery" value="SELECT name as role_name
		                                       FROM Role 
		                                       WHERE roleId = (SELECT role
		                                                       FROM UserProfile
		                                                       WHERE email = ?)" />
<!-- 		<property name="userRolesQuery" value="SELECT r.name as role_name -->
<!-- 		                                       FROM UserProfile u INNER JOIN Role r ON (u.role = r.roleId) -->
<!-- 		                                       WHERE u.email = ?" /> -->
	<!-- Hay que definir permissionsQuery (aunque la App no tenga permisos) o usará la consulta por defecto.
	     Lo dejo así pero ver si se puede omitir... si no estará realizando siempre una consulta -->
		<property name="permissionsQuery" value="SELECT enPassword as password
		                                         FROM UserProfile
		                                         WHERE email = ?" />
		<property name="permissionsLookupEnabled" value="true"></property>
		<property name="cachingEnabled" value="true" />
	</bean>

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="jdbcRealm"/>
	</bean>

	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
	    depends-on="lifecycleBeanPostProcessor"/>

	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"/>
	</bean>

	<!-- /Apache Shiro -->

</beans>
